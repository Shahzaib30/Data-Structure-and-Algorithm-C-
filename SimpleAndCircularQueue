#include<iostream>
class Circular_queue{
    private:
        int *queuearray;
        int queue_size;
        int front;
        int rear;
    public:
        Circular_queue(int size){
            queuearray=new int(size);
            queue_size=size;
            front=-1;
            rear=-1;
        }
        ~Circular_queue(){
            delete[]queuearray;
        }
    bool isempty(){
        if(front==-1 && rear==-1){
            return true;
        }
        else{
            return false;
        }
    }
    bool isfull(){
        if(front==0 && rear==queue_size-1 || front==rear+1){
            return true;
        }
        else{
            return false;
        }
    }
    void Enqueue(int val){
        if(isfull()){
            cout<<"Queue is already full.."<<endl;
        }
        else{
            if(front==-1){
                front=0;
            }
            rear=(rear+1)%queue_size;
            queuearray[rear]=val;
        }
    }
    void Dequeue(){
        if(isempty()){
            cout<<"Queue is Empty.."<<endl;\

        }
        else{
            cout<<queuearray[front]<<" is successfully DEQUEUE from queue.."<<endl;
            if(front==rear){
                front=rear=-1;
            }
            else{
                front=(front+1)%queue_size;      /*e.g suppose front is 2 and queue size is 5 then = 1
                                                it will reverse the one value before*/
            }
        }
    }
    void traverse(){
        if(isempty()){
            cout<<"Queue is already empty.."<<endl;
        }
        else if( front<=rear){
            for (int i = front; i <= rear; i++)
            {
                cout<<queuearray[i]<<" ";
            }
            
        }
        else if(front > rear){
            for (int i = front; i < queue_size; i++)
            {
                cout<<queuearray[i]<<" ";
            }
            for (int i = 0; i <=rear; i++){
                cout<<queuearray[i]<<" ";
            }
            {
                /* code */
            }
            
            
        }

    }
};
class queue{

    private:
    double *queuearray;
    int top;
    int rear;
    int qsize;
    public:
    queue(int size){
        queuearray=new double(size);
        qsize=size;
        top=-1;

        rear=-1;
    }
    ~queue(){
        delete[]queuearray;
    }

    bool isfull();
    bool isempty();
    void enqueue(double val);
    void dequeue();
    void traverse();
};
bool queue::isfull(){
    if(rear==qsize-1){
        return true;
    }
    else{
        return false;
    }
}
bool queue::isempty(){
    if(top==-1 && rear==-1){
        return true;
    }
    else{
        return false;
    }
}
void queue::enqueue(double val){
    if(isfull()){
        cout<<"QUEUE IS FULL.."<<endl;
    }
    else{
        if(top==-1){
            top=0;
        }
        
            rear++;
            queuearray[rear]=val;
        
    }
}
void queue::dequeue(){
    if(isempty()){
        cout<<"Queue is already empty.."<<endl;
    }
    else{
        cout<<queuearray[top]<<"is dequeue from queue"<<endl;
        if(top==rear){
            top=rear=-1;
        }
        else{
            top--;
        }
    }
}
void queue::traverse(){
    if(isempty()){
        cout<<"QUEUE is empty.."<<endl;
    }
    else{
    for(int i=top;i<=rear;i++){
        cout<<queuearray[i]<<" ";
    }
    cout<<endl;}
}
using namespace std;

int main() {
    cout << "Enter the size of Queue.." << endl;
    int size;
    cin >> size;

    int choice;
    cout << "Choose the type of Queue:\n1. Simple Queue\n2. Circular Queue" << endl;
    cin >> choice;

    if (choice == 1) {
        // Simple Queue
        queue q(size);
        while (true) {
            cout << "Simple Queue Menu..\n1. For Enqueue\n2. For Dequeue\n3. Traverse" << endl;
            int ch;
            cin >> ch;
            switch (ch) {
                case 1:
                    double val1;
                    cout << "Enter the value you want to enqueue..." << endl;
                    cin >> val1;
                    q.enqueue(val1);
                    break;
                case 2:
                    q.dequeue();
                    break;
                case 3:
                    cout << "The elements in queue are: ";
                    q.traverse();
                    break;
                default:
                    cout << "Invalid.." << endl;
            }
            cout << endl << "Enter 'n' to exit or press any key to continue.." << endl;
            char c;
            cin >> c;
            c = tolower(c);
            if (c == 'n') {
                break;
            } else {
                continue;
            }
        }
    } else if (choice == 2) {
        // Circular Queue
        Circular_queue cq(size);
        while (true) {
            cout << "Circular Queue Menu..\n1. For Enqueue\n2. For Dequeue\n3. Traverse" << endl;
            int ch;
            cin >> ch;
            switch (ch) {
                case 1:
                    double val1;
                    cout << "Enter the value you want to enqueue..." << endl;
                    cin >> val1;
                    cq.Enqueue(val1);
                    break;
                case 2:
                    cq.Dequeue();
                    break;
                case 3:
                    cout << "The elements in queue are: ";
                    cq.traverse();
                    break;
                default:
                    cout << "Invalid.." << endl;
            }
            cout << endl << "Enter 'n' to exit or press any key to continue.." << endl;
            char c;
            cin >> c;
            c = tolower(c);
            if (c == 'n') {
                break;
            } else {
                continue;
            }
        }
    } else {
        cout << "Invalid choice." << endl;
    }

    return 0;
}
