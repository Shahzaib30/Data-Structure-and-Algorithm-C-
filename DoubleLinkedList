#include<iostream>
#include"doubleL.h"
using namespace std;
class dlinkedlist{
    private:
        dnode*head;
        dnode*tail;
    public:
        dlinkedlist(){
            head=0;
            tail=0;
        }
    bool isempty();
    void inserthead(int val);
    void inserttail(int val);
    void insertafter(int exist,int val);
    void insertbefore(int exist,int val);
    void deletehead();
    void deletetail();
    void deletespecific(int del);
    void farwordtraverse();
    void reversetraverse();
};
bool dlinkedlist::isempty(){
    if(head==0 && tail==0){
        return true;
    }
    else{
        return false;
    }
}
void dlinkedlist::inserthead(int val){
    dnode* newnode=new dnode(val);
    if(isempty()){
        head=tail=newnode;
    }
    else{
        newnode->next=head;
        newnode->next->prev=newnode;
        head=newnode;
    }
}
void dlinkedlist::inserttail(int val){
    dnode* newnode=new dnode(val);
    if(isempty()){
        head=tail=newnode;
    }
    else{
        newnode->prev=tail;
        newnode->prev->next=newnode;
        tail=newnode;

    }
}
void dlinkedlist::insertafter(int exist, int val){
    if(isempty()){
        cout<<"List is already empty no existing value..."<<endl;
    }
    else if(tail->data==exist){
        inserttail(val);
    }
    else{
        dnode* currnode=head;
        while(currnode!=0 && currnode->data!=exist){
            currnode=currnode->next;
        }
        if(currnode==0){
            cout<<"There is no "<<exist<<" value in the list.."<<endl;
        }
        else{
            dnode* newnode=new dnode(val);
            newnode->next=currnode->next;
            newnode->prev=currnode;
            currnode->next->prev=newnode;
            currnode->next=newnode;
            
        }
    }
}
void dlinkedlist::insertbefore(int exist, int val){
    if(isempty()){
        cout<<"List is already empty there is not existing value..."<<endl;
    }
    else if(head->data==exist){
        inserthead(val);
    }
    else{
        dnode* currnode=head;
        while(currnode!=0 && currnode->data!=exist){
            currnode=currnode->next;
        }
        if(currnode==0){
            cout<<"There is no "<<exist<<" value is this list.."<<endl;
        }
        else{
            dnode* newnode= new dnode(val);
            newnode->prev=currnode->prev;
            newnode->next=currnode;
            currnode->prev->next=newnode;
            currnode->prev=newnode;

            
        }
    }
}
void dlinkedlist::deletehead(){
    if (isempty())
    {
        cout<<"List is already empty.."<<endl;
    }
    else{
        dnode* delnode=head;
        delnode->next->prev=0;
        head=delnode->next;
        delnode->next=0;
        delete delnode;
    }
}
void dlinkedlist::deletetail(){
    if(isempty()){
        cout<<"List is already empty.."<<endl;
    }
    else{
        dnode* delnode=tail;
        delnode->prev->next=0;
        tail=delnode->prev;
        delete delnode;
    }
}
void dlinkedlist::deletespecific(int del){
    if(isempty()){
        cout<<"List is already empty..."<<endl;
    }
    else if(head->data==del){
        deletehead();
    }
    else if(tail->data==del){
        deletetail();
    }
    else{
        dnode* delnode=head;
        while(delnode!=0 && delnode->data!=del){
            delnode=delnode->next;
        }
        if(delnode==0){
            cout<<"The specific value you want to delete isn't in the list.."<<endl;
        }
        else{
            delnode->prev->next=delnode->next;
            delnode->next->prev=delnode;
            delnode->next=0;
            delnode->prev=0;
            delete delnode;
            
        }
    }
}

void dlinkedlist::farwordtraverse(){
    if(isempty()){
        cout<<"List is already empty.."<<endl;
    }
    else{
        dnode* currnode=head;
        while(currnode!=0){
            cout<<currnode->data<<" ";
            currnode=currnode->next;
        }
    }
}
void dlinkedlist::reversetraverse(){
    if(isempty()){
        cout<<"List is already empty.."<<endl;
        
    }
    else{
        dnode* currnode=tail;
        while(currnode!=0){
            cout<<currnode->data<<" ";
            currnode=currnode->prev;
        }
    }
}

int main(){
    dlinkedlist ls;
    int val1,val2,val3,val4,existing1,existing2,choice1,choice2;
    while(true){
        cout<<"Welcome to Main Menu..\n1. For Insert\n2. For Delete\n3. Traverse"<<endl;
        int ch;
        cin>>ch;
        switch (ch)
        {
        case 1:
            int c1;
            cout<<"1. For Insert From head\n2. For Insert From tail\n3. Insert After\n4. Insert Before"<<endl;
            cin>>c1;
            switch (c1)
            {
            case 1:
                cout<<"Enter the value you want to insert at head : ";
                cin>>val1;
                ls.inserthead(val1);
                break;
            case 2:
                cout<<"Enter the value you want to insert at tail : ";
                cin>>val2;
                ls.inserttail(val2);
                break;
            case 3:
                cout<<"Enter the value you want to insert after : ";
                cin>>val3;
                cout<<"Enter the existing value: ";
                
                cin>>existing1;
                ls.insertafter(val3,existing1);

                break;
            case 4:
                cout<<"Enter the value you want to insert before : ";
                cin>>val4;
                cout<<"Enter the existing value: ";
                cin>>existing2;
                ls.insertbefore(val4,existing2);

                break;
            
            default:
            cout<<"Invalid choice.."<<endl;
                break;
            }
            break;
        case 2:
        cout<<"1: For Delete from head\n2. For Delete from tail\n3. Delete Specific"<<endl;
        cin>>choice1;
        switch (choice1)
        {
        case 1:
            ls.deletehead();
            break;
        case 2:
            ls.deletetail();
            break;
        case 3:
            cout<<"Enter the no you want to delete.."<<endl;
            int del;
            cin>>del;
            ls.deletespecific(del);
            break;
        
        default:
        cout<<"Invalid choice"<<endl;
            break;
        }
            
            break;
        case 3:
            cout<<"1. Forward Traverse\n2. Reverse Traverse"<<endl;
            cin>>choice2;
            switch (choice2)
            {
            case 1:
                ls.farwordtraverse();
                break;
            case 2:
                ls.reversetraverse();
                break;
            
            default:
                break;
            }
           
            break;
        
        default:
            cout<<"Invalid.."<<endl;
            
        }
        cout<<endl<<"Enter n to exit or press any key to continue.."<<endl;
        char c;
        cin>>c;
        c=tolower(c);
        if(c=='n'){
            break;
        }
        else{
            continue;
        }
    }
    
    
}

